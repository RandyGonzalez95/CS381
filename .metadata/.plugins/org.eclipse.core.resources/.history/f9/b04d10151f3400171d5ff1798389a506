/*
 * UiMgr.cpp
 *
 *  Created on: Apr 12, 2017
 *      Author: chad
 */

#include <UiMgr.h>
#include <engine.h>
#include <vector>

UiMgr::UiMgr(Engine* eng): Mgr(eng), mTrayMgr(0)
{
	// Initialize the OverlaySystem (changed for Ogre 1.9)
	    mOverlaySystem = new Ogre::OverlaySystem();
	    engine->gfxMgr->ogreSceneManager->addRenderQueueListener(mOverlaySystem);

	    //Ogre::WindowEventUtilities::addWindowEventListener(engine->gfxMgr->ogreRenderWindow, this);
}

UiMgr::~UiMgr(){ // before gfxMgr destructor

}

void UiMgr::init()
{
	//init sdktrays

    mInputContext.mKeyboard = engine->inputMgr->keyboard;
    mInputContext.mMouse = engine->inputMgr->mouse;
    mTrayMgr = new OgreBites::SdkTrayManager("InterfaceName", engine->gfxMgr->ogreRenderWindow, mInputContext, this);

}

void UiMgr::stop()
{

}

void UiMgr::loadLevel()
{
	// Create new Ogre Material for my splash screen
	Ogre::MaterialPtr material = Ogre::MaterialManager::getSingleton().create("Background", "General");
	material->getTechnique(0)->getPass(0)->createTextureUnitState("pong.png");
	material->getTechnique(0)->getPass(0)->setDepthCheckEnabled(false);
	material->getTechnique(0)->getPass(0)->setDepthWriteEnabled(false);
	material->getTechnique(0)->getPass(0)->setLightingEnabled(false);

	mTrayMgr->showBackdrop("Background");

	//OgreBites::SelectMenu* menu = mTrayMgr->createThickSelectMenu(OgreBites::TL_CENTER, "MyMenu", "Menu", 200, 3);
	//OgreBites::Button *b =
	mTrayMgr->createButton(OgreBites::TL_BOTTOM, "StartButton", "Start");

	OgreBites::SelectMenu* menu = mTrayMgr->createLongSelectMenu(OgreBites::TL_BOTTOM, "MyMenu", "Options Menu", 400, 200, 5);
	menu->addItem("How To Play");
	menu->addItem("Single Player");
	menu->addItem("Two Player");
	menu->addItem("Choose Difficulty");

	//Ogre::Bites SelectMenu *menu = mTrayMgr->createThickSelectMenu(OgreBites::TL_CENTER, "MyMenu", "Menu", 300, 3);

	//OgreBites::Label *label = mTrayMgr->createLabel(OgreBites::TL_NONE, "Label", "Caption", 200);
}

void UiMgr::tick(float dt)
{
	mTrayMgr->refreshCursor();

	std::string player1Score, player2Score;

	if(playing)
	{
    	int score1 = engine->entityMgr->entities[2]->score1;
    	int score2 = engine->entityMgr->entities[2]->score2;

    	player1Score = std::to_string(score1);
    	player2Score = std::to_string(score2);



    	text->setText("Randy: " + player1Score);

    	if(singlePlayer)
    	{
        	text2->setText("AI: " + player2Score);
    	}
    	else
    	{
    		text2->setText("Nirmit: " + player2Score);
    	}

    	// Check if a player won
    	if(score1 == 11 || score2 == 11)
    	{
    		endCondition();
    	}
	}



}

void UiMgr::endCondition()
{
	playing = false;

	// Grab the score of each player
	int score2 = engine->entityMgr->entities[2]->score2;
	int score1 = engine->entityMgr->entities[2]->score1;

	// End Screen
	Ogre::MaterialPtr material = Ogre::MaterialManager::getSingleton().create("End", "General");
	material->getTechnique(0)->getPass(0)->createTextureUnitState("pong.png");
	material->getTechnique(0)->getPass(0)->setDepthCheckEnabled(false);
	material->getTechnique(0)->getPass(0)->setDepthWriteEnabled(false);
	material->getTechnique(0)->getPass(0)->setLightingEnabled(false);

	//mTrayMgr->createButton(OgreBites::TL_BOTTOM, "Quit", "END");

	mTrayMgr->showBackdrop("End");

	if(score1 == 11)
	{
		mTrayMgr->createLabel(OgreBites::TL_CENTER, "Player1", "PLAYER 1 WINS!!", 500);
	}
	else if(score2 == 11)
	{
		mTrayMgr->createLabel(OgreBites::TL_CENTER, "Player2", "PLAYER 2 WINS!!", 500);
	}
}

void UiMgr::windowResized(Ogre::RenderWindow* rw)
{
	unsigned int width, height, depth;
	int left, top;
	rw->getMetrics(width, height, depth, left, top);

	const OIS::MouseState &ms = engine->inputMgr->mouse->getMouseState();
	ms.width = width;
	ms.height = height;
}

void UiMgr::windowClosed(Ogre::RenderWindow* rw)
{

}

bool UiMgr::keyPressed(const OIS::KeyEvent &arg)
{
	return true;
}
bool UiMgr::keyReleased(const OIS::KeyEvent &arg)
{
	return true;
}
bool UiMgr::mouseMoved(const OIS::MouseEvent &arg)
{
    if (mTrayMgr->injectMouseMove(arg)) return true;
    /* normal mouse processing here... */
	return true;
}
bool UiMgr::mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id)
{
	if (mTrayMgr->injectMouseDown(arg, id)) return true;
	    /* normal mouse processing here... */
	return true;
}
bool UiMgr::mouseReleased(const OIS::MouseEvent &arg, OIS::MouseButtonID id)
{
    if (mTrayMgr->injectMouseUp(arg, id)) return true;
    /* normal mouse processing here... */
	return true;
}

void UiMgr::buttonHit(OgreBites::Button *b)
{
    if(b->getName()=="StartButton")
    {


        //std::cout <<"Click Me!" << std::endl;
        mTrayMgr->hideBackdrop();
        mTrayMgr->destroyWidget(b->getName());
        mTrayMgr->destroyWidget("MyMenu");
        mTrayMgr->showLogo(OgreBites::TL_BOTTOMRIGHT);
        mTrayMgr->showCursor();





        //mTrayMgr->createLabel(OgreBites::TL_BOTTOMLEFT, "Label", "", 200);
        text = mTrayMgr->createTextBox(OgreBites::TL_TOPLEFT, "text", "Player 1", 150, 75);
        //text->setText(helpText);

        text2 = mTrayMgr->createTextBox(OgreBites::TL_TOPRIGHT, "text2", "Player 2", 150, 75);
        //text2->setText(helpText2);

        playing = true;


        /*mTrayMgr->createLabel(OgreBites::TL_BOTTOM, "Label2", "Caption", 200);
        mTrayMgr->createLabel(OgreBites::TL_BOTTOM, "Label3", "Caption", 200);
        mTrayMgr->createLabel(OgreBites::TL_BOTTOM, "Label4", "Caption", 200);
        mTrayMgr->createLabel(OgreBites::TL_BOTTOM, "Label5", "Caption", 200);*/
    }

   /* if(b->getName() == "Quit")
    {
    	mTrayMgr->destroyAllWidgets();
    	exit(1);
    }*/

}

void UiMgr::itemSelected(OgreBites::SelectMenu *m)
{
	std::string item;

    if(m->getName()=="MyMenu")
    {
        item = m->getSelectedItem();

        // Open Instruction Manual
        if(item == "How To Play")
        {
        	std::cout<< "How to play"<<std::endl;
        	HowToPlay();
        }
        // Set Modes
        else if(item == "Single Player")
        {
        	singlePlayer = true;
        }
        else if(item == "Two Player")
        {
        	singlePlayer = false; // set game mode to two players
        }
    }
}

void UiMgr::HowToPlay()
{
	// Create instructions Text Box
	instructions = mTrayMgr->createTextBox(OgreBites::TL_CENTER, "text", "Player 1", 150, 75);
}
