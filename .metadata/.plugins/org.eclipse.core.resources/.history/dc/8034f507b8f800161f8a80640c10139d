#include "TutorialApplication.h"

TutorialApplication::TutorialApplication(void)
{
}

TutorialApplication::~TutorialApplication(void)
{
}

void TutorialApplication::createScene(void)
{
	  mSceneMgr->setAmbientLight(Ogre::ColourValue(.25, .25, .25));

	  Ogre::Light* pointLight = mSceneMgr->createLight("PointLight");
	  pointLight->setType(Ogre::Light::LT_POINT);
	  pointLight->setPosition(250, 150, 250);
	  pointLight->setDiffuseColour(Ogre::ColourValue::White);
	  pointLight->setSpecularColour(Ogre::ColourValue::White);

	  Ogre::Entity* ninjaEntity = mSceneMgr->createEntity("ninja.mesh");
	  Ogre::SceneNode* ninjaNode = mSceneMgr->getRootSceneNode()->createChildSceneNode(
	    "NinjaNode");
	  ninjaNode->attachObject(ninjaEntity);

}


#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT)
#else
    int main(int argc, char *argv[])
#endif
    {
	// Create application object
	TutorialApplication app;

	try {
	    app.go();
	} catch(Ogre::Exception& e)  {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
	    MessageBox(NULL, e.getFullDescription().c_str(), "An exception has occurred!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
	    std::cerr << "An exception has occurred: " <<
		e.getFullDescription().c_str() << std::endl;
#endif
	}

	return 0;
    }

#ifdef __cplusplus
}
#endif
