/*
 * GfxMgr.cpp
 *
 *  Created on: Mar 27, 2017
 *      Author: randygonzalez
 */
#include <GfxMgr.h>

GfxMgr::GfxMgr()
{

}

GfxMgr::GfxMgr(Engine *eng) : Mgr(eng)
{
	mRoot = 0;
    mCamera = 0;
    mSceneMgr = 0;
    mWindow = 0;
    mResourcesCfg = Ogre::StringUtil::BLANK;
    mPluginsCfg = Ogre::StringUtil::BLANK;

    mOverlaySystem = 0;

    // OgreBites
    mCameraMan = 0;
    mDetailsPanel = 0;   	// Sample details panel
    mCursorWasVisible = false;
    mShutDown = false;
}

GfxMgr::~GfxMgr()
{

}

bool GfxMgr::setup()
{
    mRoot = new Ogre::Root(mPluginsCfg);

    setupResources();

    bool carryOn = configure();
    if (!carryOn) return false;

    chooseSceneManager();
    createCamera();
    createViewports();

    // Set default mipmap level (NB some APIs ignore this)
    Ogre::TextureManager::getSingleton().setDefaultNumMipmaps(5);

    // Create any resource listeners (for loading screens)
    createResourceListener();
    // Load resources
    loadResources();

    // Create the scene
    createScene();

    createFrameListener();

    return true;
}

bool GfxMgr::configure(void)
{

}

void GfxMgr::chooseSceneManager(void)
{

}

void GfxMgr::createCamera(void)
{

}

void GfxMgr::createFrameListener(void)
{

}

void GfxMgr::createScene(void)
{

}

void GfxMgr::destroyScene(void)
{

}

void GfxMgr::createViewports(void)
{
    // Create one viewport, entire window
    Ogre::Viewport* vp = mWindow->addViewport(mCamera);
    vp->setBackgroundColour(Ogre::ColourValue(0,0,0));

    // Alter the camera aspect ratio to match the viewport
    mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));
}

void GfxMgr::setupResources(void)
{
    // Load resource paths from config file
    Ogre::ConfigFile cf;
    cf.load(mResourcesCfg);

    // Go through all sections & settings in the file
    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();

    Ogre::String secName, typeName, archName;
    while (seci.hasMoreElements())
    {
        secName = seci.peekNextKey();
        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();
        Ogre::ConfigFile::SettingsMultiMap::iterator i;
        for (i = settings->begin(); i != settings->end(); ++i)
        {
            typeName = i->first;
            archName = i->second;

#if OGRE_PLATFORM == OGRE_PLATFORM_APPLE
            // OS X does not set the working directory relative to the app.
            // In order to make things portable on OS X we need to provide
            // the loading with it's own bundle path location.
            if (!Ogre::StringUtil::startsWith(archName, "/", false)) // only adjust relative directories
                archName = Ogre::String(Ogre::macBundlePath() + "/" + archName);
#endif

            Ogre::ResourceGroupManager::getSingleton().addResourceLocation(
                archName, typeName, secName);
        }
    }
}

void GfxMgr::createResourceListener(void)
{

}

void GfxMgr::loadResources(void)
{

}

void GfxMgr::init()
{

}

void GfxMgr::tick(float dt)
{

}

void GfxMgr::loadLevel()
{

}

void GfxMgr::stop()
{

}

void GfxMgr::createCamera()
{

}

void GfxMgr::createScene()
{

}






