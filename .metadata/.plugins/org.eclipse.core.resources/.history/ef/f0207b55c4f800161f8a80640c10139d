#include "TutorialApplication.h"

TutorialApplication::TutorialApplication()	: mRotate(.13),
											  mMove(250),
											  mCamNode(0),
											  mDirection(Ogre::Vector3::ZERO),
											  surfaceHeight(10000),
											  cubeVel(Ogre::Vector3::ZERO)
{
}

TutorialApplication::~TutorialApplication()
{
}

void TutorialApplication::createScene()
{
  mSceneMgr->setAmbientLight(Ogre::ColourValue(.25, .25, .25));

  // Set Light
  Ogre::Light* pointLight = mSceneMgr->createLight("PointLight");
  pointLight->setType(Ogre::Light::LT_POINT);
  pointLight->setPosition(250, 150, 250);
  pointLight->setDiffuseColour(Ogre::ColourValue::White);
  pointLight->setSpecularColour(Ogre::ColourValue::White);

  // Create Cube
  Ogre::Entity* cubeEntity = mSceneMgr->createEntity("cube.mesh");
  Ogre::SceneNode* cubeNode = mSceneMgr->getRootSceneNode()->createChildSceneNode(
    "NinjaNode");
  cubeNode->attachObject(cubeEntity);

  // Create Plane
  Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);

  Ogre::MeshManager::getSingleton().createPlane(
    "ground",
    Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
    plane, 10000, surfaceHeight, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);

  Ogre::Entity* groundEntity = mSceneMgr->createEntity("ground");
  mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(groundEntity);

  groundEntity->setMaterialName("Examples/Rockwall");
  groundEntity->setCastShadows(false);

  // Attach Camera Node
  mCamNode = mSceneMgr->getRootSceneNode()->createChildSceneNode(
          "CamNode", Ogre::Vector3(0, 500, 500));

  mCamNode->attachObject(mCamera);

}

bool TutorialApplication::frameRenderingQueued(const Ogre::FrameEvent& fe)
{
  bool ret = BaseApplication::frameRenderingQueued(fe);

  mCamNode->translate(mDirection * fe.timeSinceLastFrame, Ogre::Node::TS_LOCAL);

  //mSceneMgr->getSceneNode("CubeNode")->translate(cubeDir * fe.timeSinceLastFrame, Ogre::Node::TS_LOCAL);


  return ret;
}

bool TutorialApplication::keyPressed(const OIS::KeyEvent& ke)
{
  switch (ke.key)
  {
  case OIS::KC_ESCAPE:
    mShutDown = true;
    break;

  case OIS::KC_W:
  case OIS::KC_S:
  case OIS::KC_A:
  case OIS::KC_D:
	mCameraMan->injectKeyDown(ke);
    break;

  case OIS::KC_E:
	mDirection.y = mMove;
	break;

  case OIS::KC_F:
  	mDirection.y = -mMove;
  	break;


  default:
    break;
  }

  return true;
}

bool keyReleased(const OIS::KeyEvent& ke)
{

}


#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
  INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT)
#else
  int main(int argc, char *argv[])
#endif
  {
    // Create application object
    TutorialApplication app;

    try {
      app.go();
    } catch(Ogre::Exception& e)  {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
      MessageBox(
        NULL,
        e.getFullDescription().c_str(),
        "An exception has occurred!",
        MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
      std::cerr << "An exception has occurred: " <<
	e.getFullDescription().c_str() << std::endl;
#endif
    }

    return 0;
  }

#ifdef __cplusplus
}
#endif
